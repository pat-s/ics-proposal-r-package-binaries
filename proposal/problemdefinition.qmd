---
bibliography: references.bib
---

# The Problem

## Linux binary packages

Binary Packages are essential for efficient workflows in R.
Currently, CRAN is building and publishing binary packages for Windows and macOS. Linux binaries are missing, even though most (corporate) team environments run on Linux. In addition, the share of private R users using Linux as their host OS becomes larger every year.

Without binaries for Linux, package installations can take many minutes, sometimes even up to hours (e.g. when packages like {duckdb} or {Rfast} are involved). 
To my knowledge (spanning mostly from community discussions), CRAN does not seem to have plans building binary packages for Linux, at least in the forseeable future.
The motivation to do so may have diminished even further, particularly after Posit launched its public Package Manager service in 2020, offering Linux binaries for various distributions on the `x86_64` architecture.

## Public Posit Package Manager

The [PPM](https://packagemanager.posit.co) has been a valuable resource for the R community since its launch.
However, it has the following drawbacks:

- The build process is untransparent / not public
- The download speed is at best “acceptable”
- The usage of the binaries comes with a TOS agreement. This can be problematic for specific use cases and poses a general risk to users, as it is often overlooked and might cause (costly) architecture adjustments once it is realized
- Binaries for the arm64 architecture are missing

## Alpine Linux

[Alpine Linux](https://www.alpinelinux.org/) binaries are currently not available at all. Despite this, Alpine has become the de facto standard for CI/CD builds—both containerized and non-containerized—largely due to its minimal OS footprint and lightweight system libraries.

Unlike most mainstream distributions, Alpine uses the MUSL C library instead of the more common GLIBC. This difference can cause compatibility issues for packages that interface with C code, requiring additional adjustments from package authors. However, unless specifically targeting Alpine, most developers don’t make these adaptations—partly because CRAN does not run MUSL-based checks as part of its submission process.

In a recent exchange with the CRAN team (January 2025), they confirmed that introducing such checks is not currently a priority. As a result, the absence of Alpine-compatible R package binaries continues to limit R’s integration in modern CI/CD pipelines, leaving it at a disadvantage compared to other languages.

## Architecture: arm64

Here’s a refined and subtly rephrased version of your paragraph:

Much like the situation with Alpine Linux, R package binaries for the `arm64` architecture are currently unavailable. Even Posit has yet to make progress on this front, despite indicating in a 2024 correspondence that they intend to begin building for `arm64` in 2025.

The `arm64` architecture has gained significant traction in recent years, with strong support across major cloud providers. These servers often deliver better cost-efficiency and, in many cases, superior CPU performance compared to their `x86` counterparts.

The absence of R package (and interpreter) binaries for `arm64` limits R’s presence in this growing ecosystem, effectively making it a second-class citizen in this space.

## R Universe

R Universe, an existing R-consortium funded project, is a first step to an alternative packaging system for the R community.

However, as of today, R universe only builds binary packages for the latest LTS release of Ubuntu (filtered on Linux in general). 
Packages for other architectures and distributions are missing.

In addition, the build process heavily relies on GitHub Actions.
While this might seem a positive aspect for some on the first look, I'd argue that it is effectively a downside for the following reasons:

- GitHub's public runners are rather slow compared to evenly-sized cloud VMs
- GitHubs default free build minutes are quite limited and the costs for adding additonal ones are quite high, compared with the alternative of providing private runners
- GitHub did not have `arm64` support until recently, and the support for such is in an relatively early stage with limited build capacities

I argue that most of the build process could be done more efficiently, both in terms of costs and resource efficiency.

Another notable shortcoming is the opacity of the package build engine, along with its infrastructure and overall build process.
While each package has a dedicated repository that runs builds publicly via GitHub Actions, the underlying logic and workflows remain somewhat abstract and not easily accessible.

This lack of transparency means users cannot readily reuse or adapt the build and publishing process for their own purposes—they are instead fully dependent on the behind-the-scenes mechanisms of R Universe.

## Creating custom repositories

All of previously mentioned limitations pose significant challenges for teams looking to create and maintain their own private repository with a curated set of (internal) R packages.
Nowadays, some tools exist that allow achieving this: [{minicran}](https://github.com/andrie/miniCRAN) and [drat](https://cran.r-project.org/web/packages/drat/index.html).
However, these do not provide the option to (easily) build binary packages or manage the packages in S3 buckets.

Ideally, it should be as easy as running a single function (or two) which initializes the remote storage, builds packages from a local source or remote URL and returns the final repository URL for package downloads in the end.

The motivation for developing alternative solutions has grown over the past year, particularly after Posit significantly increased the pricing of its Package Manager product.
Previously, it offered a reasonably priced and convenient way to manage internal R repositories. However, the recent pricing shift has made the tool cost-prohibitive for many organizations, especially relative to its feature set; prompting numerous teams to reevaluate their tooling choices.
